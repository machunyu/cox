//*****************************************************************************************
//
//! \defgroup SPI
//!
//! \brief Serial Peripheral Interface (SPI) Peripheral Driver.
//!
//!  The Serial Peripheral Interface (SPI) is a synchronous serial data communication   
//!  protocol which operates in full duplex mode.  Devices communicate in master/slave mode
//!  with 4-wire bi-direction interface.
//!
//! - Configure the SPI controler as master device or a slave , it should generate clock 
//!   and chip-select signal if it is set as master .
//! - Each SPI controller can generates an individual interrupt when data transfer is finished  
//!   and the respective interrupt event flag IF will be set. The interrupt event flag will 
//!   generates an interrupt to CPU if the interrupt enable bit IE is set.
//! - Transfer and receive data which is in your mode
//!
//! <br />
//! <h1>Contents</h1>
//! - \ref SPI_Blcok
//! - \ref SPI_Function_Desc
//!   - \ref SPI_Configure_Control
//!   - \ref SPI_Interrupt_Control
//!   - \ref SPI_TransferReceive_Control
//!   .
//! - \ref SPI_Applications
//! .
//!
//! \n
//! \section SPI_Blcok 1. SPI Physical Block
//! <img src="spi_block.png" />
//!
//! <br />
//! \section SPI_Function_Desc 2. SPI Function Description
//!
//! <br /> 
//! \subsection SPI_Configure_Control 2.1 SPI device controller configuration
//!
//! Configure the SPI controller as a master or a slave device. It should 
//! generate clock and chip-select signals if it is set as a master device.
//!
//! <br />
//! \subsection SPI_Interrupt_Control 2.2 SPI interrupt control
//! 
//! Each SPI controller can generate an individual interrupt when data transfer is finished  
//! and the respective interrupt event flag IF will be set. The interrupt event flag will 
//! generates an interrupt to CPU if the interrupt enable bit IE is set.
//!
//! <br />
//! \subsection SPI_TransferReceive_Control 2.3 SPI Transfer and Receive data
//! Transfer and receive data.
//! 
//! <br />
//! \section SPI_Applications 3. SPI Applications
//! will be added in the future
//!
//! <br />
//! \note Here are descriptions of the common functions of the SPI. The CoX SPI 
//! Interface is based on the functions above.
//
//******************************************************************************************


//******************************************************************************************
//
//! \defgroup xSPI xSPI
//! \brief CoX SPI Peripheral Interface
//!
//! The xSPI is the SPI Peripheral Interrupt of CoX.It defines some common macros and APIs
//! macro and APIs
//! 
//! <h1>Contents</h1>
//! - \ref CoX_SPI_How_Define
//! - \ref xSPI_API_Group_Peripheral
//!   - \ref xSPI_API_Group_Configure
//!   - \ref xSPI_API_Group_Interrupt
//!   - \ref xSPI_API_Group_TransferReceiveData
//!   .
//! - \ref xSPI_Usage
//! .
//!
//! <br />
//!
//! \section CoX_SPI_How_Define 1 How is the SPI API Standard Define?
//! CoX SPI defines the APIs based on the following common functions:
//! 
//! - SPI Configure Control
//!   - Master or Slave Select
//!   - Clock Mode and data width
//!   .
//! - SPI Interrupt control
//!   - Enable Interrupt
//!   - ISR and CallBack Function
//! .
//! - SPI Transfer and Receive 
//! - Configure SPI as master or slave mode
//! - Implement Transfer and Receive
//! .
//!
//! <br />
//! \section xSPI_API_Group_Peripheral 2 API Groups
//!
//! The CoX SPI APIs can be classified into three groups by functions:
//! - those that deal with SPI mode configuration,
//! - those that deal with SPI interrupt controlling,
//! - those that deal with SPI transfer and receive control.
//! .
//! <br />
//! \subsection xSPI_API_Group_Configure 2.1 2.1 SPI configuration control APIs
//!
//! - xSPIConfigSet()
//! - xSPIEnable()
//! - xSPIDisable()
//! - xSPIDMADisable()
//! - xSPIDMAEnable()
//! .
//!
//! <br />
//! \subsection xSPI_API_Group_Interrupt 2.2 SPI Interrupt Control APIs
//! - xSPIIntEnable()
//! - xSPIIntDisable()
//! - xSPIIntStatusGet()
//! - xSPIIntPendingClear()
//! .
//!
//! <br />
//! \subsection xSPI_API_Group_TransferReceiveData 2.3 SPI Transfer&Receive Control 
//!
//! - xSPIDataWrite()
//! - xSPIDataRead()
//! - xSPIBitLengthGet()
//! - xSPISingleDataReadWrite()
//! - xSPIIsTxFull()
//! - xSPIIsRxFull()
//! - xSPIIsTxEmpty()
//! - xSPIIsRxEmpty()
//! - xSPIIsBusy()
//! .
//! <br />
//! \section xSPI_Usage 3 Program Examples
//! The following example shows how to use the SPI APIs to configue SPI and to implement the 
//! function of transferring and receiving. 
//! \code
//! #include "xhw_memmap.h"
//! #include "Xspi.h"
//! #include "Xhw_spi.h"
//! #include "Xsysctl.h"
//! #include "xhw_types.h"
//! #include "Xgpio.h"
//! #include "Xhw_gpio.h"
//! #include "SPI_loop.h"
//! #include "Xhw_sysctl.h"
//! #include "test.h"
//! #include "testcase.h"
//!
//! unsigned char SendData[] = "Wonderful World";
//! unsigned char ReceData[64];
//! unsigned long i;
//!
//! //*****************************************************************************
//!
//! //Ininite the SPI case which is needed
//!
//! //param None
//!
//! //This function ininite the SPI including clock source and enable spi 
//!
//! //return none
//!
//! //*****************************************************************************
//! void SpiReceiveTransferInit(void)
//! {
//!    SysCtlKeyAddrUnlock();
//!    xHWREG(SYSCLK_PWRCON) |= SYSCLK_PWRCON_XTL12M_EN;
//!    xHWREG(SYSCLK_PLLCON) &= ~SYSCLK_PLLCON_OE;
//!    xHWREG(SYSCLK_PLLCON) &= ~SYSCLK_PLLCON_PD;
//!    //
//!    // Set SysClk 36MHz using Extern 12M oscillator
//!    //
//!    xSysCtlClockSet(36000000, xSYSCTL_OSC_MAIN|xSYSCTL_XTAL_12MHZ);
//!    //
//!    // Enable Peripheral SPI0,SPI1
//!    //
//!    SysCtlPeripheralEnable(SYSCTL_PERIPH_SPI0);
//!    SysCtlPeripheralEnable(SYSCTL_PERIPH_SPI1);
//!    SPIIntEnable(SPI0_BASE, TransferOver);
//!  }
//! //*****************************************************************************
//!
//! //Spi Master Slave Mode Configure
//!
//! //param None
//!
//! //This function configure the SPI as master and slave mode at the same time
//! //transfer and receive data
//!
//! //return None
//!
//! //*****************************************************************************
//! void SpiMasterSlaveModeConfig(void)
//! {
//!    
//!    //
//!    // Configure Some GPIO pins as SPI Mode
//!    //
//!    GPIOPinFunctionSet(GPIO_FUNCTION_SPI, GPIO_PORTC_BASE,GPIO_PIN_2);
//!    GPIOPinFunctionSet(GPIO_FUNCTION_SPI, GPIO_PORTC_BASE,GPIO_PIN_3);
//!    GPIOPinFunctionSet(GPIO_FUNCTION_SPI, GPIO_PORTC_BASE,GPIO_PIN_0);
//!    GPIOPinFunctionSet(GPIO_FUNCTION_SPI, GPIO_PORTC_BASE,GPIO_PIN_1);
//!    GPIOPinFunctionSet(GPIO_FUNCTION_SPI, GPIO_PORTC_BASE,GPIO_PIN_9);
//!    GPIOPinFunctionSet(GPIO_FUNCTION_SPI, GPIO_PORTC_BASE,GPIO_PIN_8);
//!    GPIOPinFunctionSet(GPIO_FUNCTION_SPI, GPIO_PORTC_BASE,GPIO_PIN_10);
//!    GPIOPinFunctionSet(GPIO_FUNCTION_SPI, GPIO_PORTC_BASE,GPIO_PIN_11);
//!    //
//!    // Master Mode  polarity 0,Rx latched at rising edge Tx changed at rising edge
//!    // 2000000Hz 8Bits Data windth  SPI MSB First
//!    //
//! SPIConfig(SPI0_BASE,2000000,SPI_FORMAT_MODE_5|SPI_DATA_WIDTH8|SPI_MSB_FIRST|SPI_MODE_MASTER);
//!    //
//!    // Slave Mode  polarity 0,Rx latched at rising edge Tx changed at rising edge
//!    // 2000000Hz 8Bits Data windth  SPI MSB First
//!    //
//!    xHWREG(SPI1_BASE + SPI_CNTRL) = 0x00000000;
//!    xHWREG(SPI1_BASE + SPI_CNTRL) |= 0x00040844;
//!    //
//!    // Software Control Transfer Select SS0 and SS1
//!    //
//!    xSPISSSet(SPI0_BASE,xSPI_SS_SOFTWARE,SPI_SS0);   
//!
//!    //
//!    // Level Trig Slave at High Level
//!    //
//!    SPISSConfig(SPI0_BASE, SPI_SS_LEVEL_TRIGGER,SPI_SS_ACTIVE_HIGH_RISING);
//!    SPISSConfig(SPI1_BASE, SPI_SS_LEVEL_TRIGGER,SPI_SS_ACTIVE_HIGH_RISING);
//!
//!    for(i=0;i<1;i++)
//!    {
//!        SPIDataWrite(SPI0_BASE,SendData,15);
//!        SPIDataRead(SPI1_BASE,ReceData, 16);
//!        TestIOPut('O');
//!        TestIOPut('K');
//!    }
//!    TestIOPut('\n');
//!    for(i=0;i<18;i++)
//!    {
//!        TestIOPut(ReceData[i]);  
//!    }
//! }
//! //******************************************************************************
//! //
//! // The main function of the SPI transfer  
//! //
//! //******************************************************************************
//! int main(void)
//! {
//!    SpiReceiveTransferInit();
//!    SpiMasterSlaveModeConfig();
//!    while(1)
//!    {	
//!    }
//!        
//! }
//! \endcode
//! \note 
//!
//**************************************************************************










