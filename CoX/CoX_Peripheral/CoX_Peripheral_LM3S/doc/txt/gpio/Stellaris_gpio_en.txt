//*****************************************************************************
//
//! \defgroup Stellaris_GPIO Stellaris GPIO
//! 
//! \brief TI Stellaris GPIO Peripheral Driver.
//!
//! The CoX Peripheral Library also provides APIs for full functions of Nuvoton
//! Stellaris GPIO. This module supports the whole Stellaris Series.
//!
//! <br />
//! <h1>Contents</h1>
//! - \ref Stellaris_GPIO_Function_Desc
//! - \ref Stellaris_GPIO_API_Group
//!   - \ref Stellaris_GPIO_API_Group_Config
//!   - \ref Stellaris_GPIO_API_Group_Interrupt
//!   - \ref Stellaris_GPIO_API_Group_Pin
//!   .
//! - \ref Stellaris_GPIO_Usage
//! .
//! 
//! <br />
//! \section Stellaris_GPIO_Function_Desc 1. Functional Description
//! Each pin has the following capabilities:
//! - Can be configured as an input or an output. 
//! - In input mode, can generate interrupts on high level, low level, 
//! both level, rising edge, falling edge, or both edges.
//! - In output mode, can be set high level or low level. 
//! - Optional quasi-bidirection operation. On reset, they default to quasi-bidirection operation.
//! - Optional open-drain operation.  
//! - Can be configured to be a GPIO or a peripheral pin. On reset, they 
//! default to being GPIOs.
//! .
//! 
//! <br />
//! \section Stellaris_GPIO_API_Group 2. API Groups
//! 
//! The GPIO API is broken into three groups of functions: 
//! - those that deal with configuring the GPIO pins, 
//! - those that deal with interrupts, 
//! - those that access the pin value.
//! .
//!
//! <br />
//! \subsection Stellaris_GPIO_API_Group_Config 2.1 GPIO Config APIs
//! 
//! The GPIO pins are configured with:
//! - GPIODirModeSet(),
//! - GPIOPinDebounceEnable(),
//! - GPIOPinDebounceDisable(),
//! - GPIOPinMaskSet(),
//! - GPIODebounceTimeSet(),
//! .
//! The configuration can be read back with:
//! - GPIODirModeGet(),
//! - GPIOPortMaskGet(),
//! - GPIODebounceTimeGet().  
//!.
//! 
//! There are also convenient
//! functions for configuring the pin in the required or recommended 
//! configuration for a particular peripheral; these are :
//! - GPIOPinConfigure(),
//! - GPIOPinFunctionSet().
//! .
//! 
//! <br />
//! \subsection Stellaris_GPIO_API_Group_Interrupt 2.2 GPIO Interrupt APIs
//! 
//! The GPIO interrupts are handled with: 
//! - GPIOPinIntCallbackInit(),
//! - GPIOPinIntEnable(),
//! - GPIOPinIntDisable(), 
//! - GPIOPinIntStatus(), 
//! - GPIOPinIntClear().
//! .
//!
//! <br />
//! \subsection Stellaris_GPIO_API_Group_Pin 2.3 GPIO Pin State APIs
//! 
//! The GPIO pin state is accessed with:
//! - GPIOPinRead(),
//! - GPIOPinWrite(),
//! - GPIOPinPortDoutGet().
//! .
//!
//! <br />
//! \section Stellaris_GPIO_Usage 3. Usage & Program Examples
//! The following example shows how to use the GPIO API to initialize the 
//! GPIO, enable interrupts, read data from pins, and write data to pins.
//! 
//! \code
//! int iVal;
//!
//! //
//! // Initialize the GPIO pin configuration.
//! //
//! // Set pins 0, 1 and 2 as input.
//! GPIODirModeSet(GPIO_PORTA_BASE,
//!                      GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2, GPIO_DIR_MODE_IN);
//! //
//! // Set pins 0, 1 as output.
//! //
//! GPIODirModeSet(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1, GPIO_DIR_MODE_OUT);
//! //
//! // Make pins 0 and 1 rising edge triggered interrupts.
//! //
//! GPIOPinIntEnable(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1, GPIO_RISING_EDGE);
//! //
//! // Make pin 0 high level triggered interrupts.
//! //
//! GPIOPinIntEnable(GPIO_PORTA_BASE, GPIO_PIN_0, GPIO_HIGH_LEVEL);
//! //
//! // Read some pins.
//! //
//! iVal = GPIOPinRead(GPIO_PORTA_BASE,
//!                    (GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2));
//! //
//! // Write some pins. Even though pins 0, 1, and 2 are specified, those
//! // pins are unaffected by this write since they are configured as inputs.
//! // At the end of this write, pin 0 will be a 1, and pin 1 will be a 0.
//! //
//! GPIOPinWrite(GPIO_PORTA_BASE,
//!              (GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2),
//!              0x00000001);
//!
//! \endcode
//! 
//! 
//
//*****************************************************************************
