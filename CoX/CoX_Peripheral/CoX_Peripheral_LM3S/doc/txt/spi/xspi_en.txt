//*****************************************************************************************
//
//! \defgroup SPI
//!
//! \brief Serial Peripheral Interface (SPI) Peripheral Driver.
//!
//!  The Serial Peripheral Interface (SPI) is a synchronous serial data communication   
//!  protocol which operates in full duplex mode.  Devices communicate in master/slave mode
//!  with 4-wire bi-direction interface.
//!
//! - Configure the SPI controler as master device or a slave , it should generate clock 
//!   and chip-select signal if it is set as master .
//! - Each SPI controller can generates an individual interrupt when data transfer is finished  
//!   and the respective interrupt event flag IF will be set. The interrupt event flag will 
//!   generates an interrupt to CPU if the interrupt enable bit IE is set.
//! - Transfer and receive data which is in your mode
//!
//! <br />
//! <h1>Contents</h1>
//! - \ref SPI_Blcok
//! - \ref SPI_Function_Desc
//!   - \ref SPI_Configure_Control
//!   - \ref SPI_Interrupt_Control
//!   - \ref SPI_TransferReceive_Control
//!   .
//! - \ref SPI_Applications
//! .
//!
//! \n
//! \section SPI_Blcok 1. SPI Physical Block
//! <img src="spi_block.png" />
//!
//! <br />
//! \section SPI_Function_Desc 2. SPI Function Description
//!
//! <br /> 
//! \subsection SPI_Configure_Control 2.1 SPI device controller configuration
//!
//! Configure the SPI controller as a master or a slave device. It should 
//! generate clock and chip-select signals if it is set as a master device.
//!
//! <br />
//! \subsection SPI_Interrupt_Control 2.2 SPI interrupt control
//! 
//! Each SPI controller can generate an individual interrupt when data transfer is finished  
//! and the respective interrupt event flag IF will be set. The interrupt event flag will 
//! generates an interrupt to CPU if the interrupt enable bit IE is set.
//!
//! <br />
//! \subsection SPI_TransferReceive_Control 2.3 SPI Transfer and Receive data
//! Transfer and receive data.
//! 
//! <br />
//! \section SPI_Applications 3. SPI Applications
//! will be added in the future
//!
//! <br />
//! \note Here are descriptions of the common functions of the SPI. The CoX SPI 
//! Interface is based on the functions above.
//
//******************************************************************************************


//******************************************************************************************
//
//! \defgroup xSPI xSPI
//! \brief CoX SPI Peripheral Interface
//!
//! The xSPI is the SPI Peripheral Interrupt of CoX.It defines some common macros and APIs
//! macro and APIs
//! 
//! <h1>Contents</h1>
//! - \ref CoX_SPI_How_Define
//! - \ref xSPI_API_Group_Peripheral
//!   - \ref xSPI_API_Group_Configure
//!   - \ref xSPI_API_Group_Interrupt
//!   - \ref xSPI_API_Group_TransferReceiveData
//!   .
//! - \ref xSPI_Usage
//! .
//!
//! <br />
//!
//! \section CoX_SPI_How_Define 1 How is the SPI API Standard Define?
//! CoX SPI defines the APIs based on the following common functions:
//! 
//! - SPI Configure Control
//!   - Master or Slave Select
//!   - Clock Mode and data width
//!   .
//! - SPI Interrupt control
//!   - Enable Interrupt
//!   - ISR and CallBack Function
//! .
//! - SPI Transfer and Receive 
//! - Configure SPI as master or slave mode
//! - Implement Transfer and Receive
//! .
//!
//! <br />
//! \section xSPI_API_Group_Peripheral 2 API Groups
//!
//! The CoX SPI APIs can be classified into three groups by functions:
//! - those that deal with SPI mode configuration,
//! - those that deal with SPI interrupt controlling,
//! - those that deal with SPI transfer and receive control.
//! .
//! <br />
//! \subsection xSPI_API_Group_Configure 2.1 2.1 SPI configuration control APIs
//!
//! - xSPIConfigSet()
//! - xSPIEnable()
//! - xSPIDisable()
//! - xSPISSSet()
//! .
//!
//! <br />
//! \subsection xSPI_API_Group_Interrupt 2.2 SPI Interrupt Control APIs
//! - xSPIIntEnable()
//! - xSPIIntDisable()
//! - xSPIStatusGet()
//! - xSPIIntCallbackInit()
//! .
//!
//! <br />
//! \subsection xSPI_API_Group_TransferReceiveData 2.3 SPI Transfer&Receive Control 
//!
//! - xSPIDataWrite()
//! - xSPIDataRead()
//! - xSPIBitLengthGet()
//! - xSPISingleDataReadWrite()
//! - xSPIIsTxFull()
//! - xSPIIsRxFull()
//! - xSPIIsTxEmpty()
//! - xSPIIsRxEmpty()
//! - xSPIIsBusy()
//! .
//! <br />
//! \section xSPI_Usage 3 Program Examples
//! The following example shows how to use the SPI APIs to configue SPI and to implement the 
//! function of transferring and receiving. 
//! \code
//! #include "xhw_types.h"
//! #include "xhw_memmap.h"
//! #include "xspi.h"
//! #include "xhw_spi.h"
//! #include "xsysctl.h"
//! #include "xgpio.h"
//! #include "xcore.h"
//!
//! unsigned long ulSourceData[] = {0x01020304, 0x11121314, 0x21212124, 0x31323334,
//!                                 0x41424344, 0x51525354, 0x61626364, 0x71727374, 
//!                                 0x81828384, 0x91929394, 0xA1A2A3A4, 0xB1B2B3B4, 
//!                                 0xC1C2C3C4, 0xD1D2D3D4, 0xE1E2E3E4, 0xF1F2F3F4};
//! unsigned long ulDestData[16];
//! unsigned long i;
//!
//! //*****************************************************************************
//! //
//! // Ininite the SPI case which is needed
//! //
//! // \param None
//! //
//! // This function ininite the SPI including clock source and enable spi 
//! //
//! // \return none
//! //
//! //*****************************************************************************
//! void SpiReceiveTransferInit(void)
//! {
//!     //
//!     // Set SysClk 36MHz using Extern 12M oscillator
//!     //
//!     xSysCtlClockSet(12000000, xSYSCTL_OSC_MAIN | xSYSCTL_XTAL_12MHZ);
//!     //
//!     // Enable Peripheral SPI0
//!     //
//!     SysCtlPeripheralEnable(SYSCTL_PERIPH_SPI0);
//!     
//!     //
//!     // Configure Some GPIO pins as SPI Mode
//!     //
//!     xSPinTypeSPI(SPI0CLK, PB7);
//!     xSPinTypeSPI(SPI0MOSI, PB5);
//!     xSPinTypeSPI(SPI0MISO, PB6);
//!     xSPinTypeSPI(SPI0CS, PB4);
//!
//!     xSPIConfigSet(SPI0_BASE, 200000, SPI_FORMAT_MODE_5 | SPI_DATA_WIDTH32 | 
//!                              SPI_MSB_FIRST | SPI_MODE_SLAVE);
//!
//! }
//! //*****************************************************************************
//! //
//! // Spi Master Slave Mode Configure
//! //
//! // \param None
//! //
//! // This function configure the SPI as master and slave mode at the same time
//! // transfer and receive data
//! //
//! // \return None
//! //
//! //*****************************************************************************
//! void SpiSlaveModeConfig(void)
//! {    
//!     for(i = 0; i < 16; i++)
//!     {
//!         ulDestData[i] = xSPISingleDataReadWrite(SPI0_BASE, ulSourceData[i]);
//!     }    
//! }
//! \endcode
//! \note 
//!
//**************************************************************************










