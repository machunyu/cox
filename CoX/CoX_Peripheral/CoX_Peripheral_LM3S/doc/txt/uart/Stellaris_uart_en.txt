//*****************************************************************************
//
//! \defgroup Stellaris_UART Stellaris UART
//! 
//! \brief Stellaris UART Peripheral Driver.
//!
//! The CoX Peripheral Library also provide APIs for full functions of Stellaris
//! UART. This module supports the whole Stellaris Series.
//!
//! \n
//! <h1>Contents</h1>
//! - \ref Stellaris_UART_Blcok
//! - \ref Stellaris_UART_Function_Desc
//!   - \ref Stellaris_UART_Data_Transmission
//!     - \ref Stellaris_UART_RxTx
//!     - \ref Stellaris_UART_Baudrate
//!     - \ref Stellaris_UART_FIFO
//!     .
//!   - \ref Stellaris_UART_SIR
//!   - \ref Stellaris_UART_Modem
//!   - \ref Stellaris_UART_LIN
//!   - \ref Stellaris_UART_SmartCard
//!   - \ref Stellaris_UART_Interrupt
//!   .
//! - \ref Stellaris_UART_API_Group
//!   - \ref Stellaris_UART_API_Group_Config
//!   - \ref Stellaris_UART_API_Group_FIFO
//!   - \ref Stellaris_UART_API_Group_SIR
//!   - \ref Stellaris_UART_API_Group_SmartCard
//!   - \ref Stellaris_UART_API_Group_Modem
//!   - \ref Stellaris_UART_API_Group_LIN
//!   - \ref Stellaris_UART_API_Group_Interrupt
//!   .
//! - \ref Stellaris_UART_Usage
//! .
//!
//! \n
//! \section Stellaris_UART_Blcok 1. UART Physical Block
//! <img src="Stellaris_UART_block.png" />
//! 
//! \n
//! \section Stellaris_UART_Function_Desc 2. Functional Description
//! 
//!
//! \n
//! \subsection Stellaris_UART_Data_Transmission 2.1 UART Data Transmission
//!
//! \subsubsection Stellaris_UART_RxTx 2.1.1 UART Data Transmit and Receive
//! 
//! Full duplex, asynchronous communications. Separate receive/transmit 
//! 16/16 bytes(UART0,UART1,UART2) entry FIFO for data payloads. 
//!
//! \subsubsection Stellaris_UART_Baudrate 2.1.2 UART Baudrate Generation
//! 
//! The UART includes a programmable baud rate generator that is capable
//! of dividing clock input by divisors to produce the serial clock that
//! transmitter and receiver need.
//! <center>
//! <b>UART Baud Rate Equation</b>
//! <table>
//! <tr><td>Mode</td><td>DIV_X_EN</td><td>DIV_X_ONE</td><td>Divider X</td><td>BRD</td><td>Baud rate equation</td></tr>
//! <tr><td>0</td><td>0</td><td>0</td><td>B</td><td>A</td><td>UART_CLK/[16*(A+2)]</td></tr>
//! <tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>UART_CLK/[(B+1)*(A+2)], B must >= 8</td></tr>
//! <tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>UART_CLK/(A+2), A must >= 3</td></tr>
//! </table>
//! </center>
//!
//! \subsubsection Stellaris_UART_FIFO 2.1.3 UART FIFO
//!
//! The UART0 and UART1 are built-in with a 16-byte transmitter FIFO(TX_FIFO) and 
//! a 16-byte receiver FIFO(RX_FIFO) that reduces the number of interrupts presented
//! to the CPU.
//!
//! <center>
//! <b>RX FIFO Interrupt(INT_RDA) Trigger Level</b>
//! <table>
//! <tr><td>RFITL</td><td>INTR_RDA Trigger Level(Bytes)</td></tr>
//! <tr><td>0x00</td><td>01</td></tr>
//! <tr><td>0x01</td><td>04</td></tr>
//! <tr><td>0x02</td><td>08</td></tr>
//! <tr><td>0x03</td><td>14</td></tr>
//! </table>
//! </center>
//!
//! \n
//! \subsection Stellaris_UART_SIR 2.2 UART Serial IR
//!
//! The IrDA SIR Encoder/Decoder provides functionality which converts between 
//! UART data stream and half duplex serial SIR interface. The following diagram
//! is IrDA encoder/decoder waveform:
//! <img src="Stellaris_IrDA_TimingDiagram.png" />
//!
//!
//! \n
//! \subsection Stellaris_UART_Modem 2.3 UART Modem Support
//!
//! Support hardware auto flow control/flow control funciton(CTS, RTS) and programmable
//! RTS flow control trigger level(UART0 and UART1 support).
//!
//! \n
//! \subsection Stellaris_UART_LIN 2.4 UART LIN Support
//!
//! Support LIN function mode.
//! <ul>
//! <li>Support LIN master/slave mode</li>
//! <li>Support programmable break generation function for transmitter</li>
//! <li>Support break detect function for receiver</li>
//! </ul>
//! The UART supports LIN function, and LIN mode is selected by setting the
//! UART_CTL_LIN bit in UART_CTL register. In LIN mode, each byte field is initialed
//! by a start bit with value zero(dominant), followed by 8 data bits (LSB first)
//! and ended by 1 stop bit with value one(recessive) in accordance with the LIN 
//! standard.
//! <center>
//! <b>Structure of LIN Frame</b>
//! <img src="Stellaris_UART_LIN_Frame.png" />
//! </center>
//! \n
//! \subsection Stellaris_UART_SmartCard 2.5 UART SmartCard Support
//! Support SmartCard function mode.
//! <ul>
//! <li>Support SmartCard 8bit mode</li>
//! <li>Support to allow communication with an ISO 7816 smartcard</li>
//! </ul>
//!
//! The UART supports SmartCard 8 bits mode function. The SmartCard mode is selected 
//! by setting the bit 3(SMART) of UART_CTL register to select SmartCard function. 
//! The UnTx signal is used as a bit clock, and the UnRx signal is used as the half-duplex
//! communication line connected to the smartcard. A GPIO signal can be used to generate
//! the reset signal to the smartcard.
//!
//! \n
//! \subsection Stellaris_UART_Interrupt 2.6 UART Interrupt
//!
//! The UART can generate interrupts when the following conditions are observed:
//! Overrun Error
//! Break Error
//! Parity Error
//! Framing Error
//! Receive Timeout
//! Transmit
//! Receive 
//! DSR Modem
//! DCD Modem
//! CTS Modem
//! 
//! \n
//! \section Stellaris_UART_API_Group 3. API Groups
//! 
//! \n
//! \subsection Stellaris_UART_API_Group_Config 3.1 UART Config APIs
//! 
//! -  UARTParityModeSet()
//! -  UARTParityModeGet()
//! -  UARTConfigSetExpClk()
//! -  UARTConfigGetExpClk()
//! -  UARTEnable()
//! -  UARTCharGetNonBlocking()
//! -  UARTCharGet()
//! -  UARTCharPutNonBlocking()
//! -  UARTCharPut()
//! -  UARTBreakCtl()
//! -  UARTRxErrorGet()
//! -  UARTRxErrorClear()
//! .
//!
//! \n
//! \subsection Stellaris_UART_API_Group_FIFO 3.2 UART FIFO APIs
//!
//! -  UARTFIFOLevelSet()
//! -  UARTFIFOLevelGet()
//! -  UARTCharsAvail()
//! -  UARTSpaceAvail()
//! .
//!
//! \n
//! \subsection Stellaris_UART_API_Group_SIR 3.3 UART IrDA APIs
//!
//! -  UARTIrDAConfig()
//! -  UARTIrDAEnable()
//! -  UARTIrDADisable()
//! .
//!
//! \n
//! \subsection Stellaris_UART_API_Group_SmartCard 3.4 UART SmartCard APIs
//!
//! -  UARTSmartCardEnable()
//! -  UARTSmartCardDisable()
//! -  UARTSmartCardConfig()
//! .
//!
//! \n
//! \subsection Stellaris_UART_API_Group_Modem 3.5 UART Modem APIs
//!
//! -  UARTModemControlSet()
//! -  UARTModemControlClear()
//! -  UARTModemControlGet()
//! -  UARTModemStatusGet()
//! -  UARTFlowControlSet()
//! -  UARTFlowControlGet()
//! .
//!
//!
//! \n
//! \subsection Stellaris_UART_API_Group_LIN 3.6 UART LIN APIs
//!
//! -  UARTLINConfig()
//! -  UARTLINEnable()
//! -  UARTLINDisable()
//! .
//!
//! \n
//! \subsection Stellaris_UART_API_Group_Interrupt 3.7 UART Interrupt APIs
//!
//! -  UARTIntEnable()
//! -  UARTIntDisable()
//! -  UARTIntStatus()
//! -  UARTIntEnableGet()
//! -  UARTIntCallbackInit()
//! -  UARTIntClear()
//! .
//! 
//! \n
//! \section Stellaris_UART_Usage 4. Usage & Program Examples
//! 
//! - \ref xUART_App_NormalMode
//! - \ref xUART_App_IrDA
//! - \ref xUART_App_Modem
//! .
//! 
//! \note 
//! 
//*****************************************************************************
