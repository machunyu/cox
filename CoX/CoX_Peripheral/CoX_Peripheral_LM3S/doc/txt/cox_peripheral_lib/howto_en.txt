
//*****************************************************************************
//
//! \page CoX_Guide How to
//!  
//! 
//!
//! <h1>Contents</h1>
//! - \ref CoX_Guide_Howto
//!   - \ref CoX_Guide_Howto_Step
//!   - \ref CoX_Guide_Howto_Shortpin
//!     - \ref CoX_Guide_Howto_Shortpin_What
//!     - \ref CoX_Guide_Howto_Shortpin_When
//!     - \ref CoX_Guide_Howto_Shortpin_How
//!     .
//!   - \ref CoX_Guide_Howto_Int
//!   - \ref CoX_Guide_Howto_Peripheral
//!   - \ref CoX_Guide_Howto_More_Portable 
//!   - \ref CoX_Guide_Howto_Code_Standard
//!     - \ref CoX_Guide_Howto_Code_Name
//!     - \ref CoX_Guide_Howto_Code_doxygen
//!     .
//!   .
//! - \ref CoX_Guide_Port
//! .
//! \n
//!
//! \section CoX_Guide_Howto 1. How to use CoX Peripheral Library?
//! \subsection CoX_Guide_Howto_Step 1.1 Step of using CoX Peripheral Library?
//! -# Select the CoX implmentation according to the selected MCU, such as 
//! \b NUC1xx CoX Peripheral Library. copy the libcox, startup to your workdir.
//! -# Determine the compiler IDE, such as MDK, add startup_rvmdk.s to your 
//! project.
//! -# Define preprocessor symbols to tell the CoX that which compiler you use:
//!   - \b gcc - CooCox CoIDE(GCC).
//!   - \b ewarm - IAR EWARM.
//!   - \b rvmdk - Keil MDK.
//!   .
//! -# Define preprocessor symbols \b xDebug to enable the CoX debug feature,
//! \ref xASSERT to assert some conditions.
//! -# Include the header file :
//!   - \ref xhw_types.h 
//!   - \ref xhw_memmap.h
//!   - \ref xhw_ints.h
//!   - \ref xgpio.h or the peripheral that you use.
//!   .
//! -# APIs with a prefix \b x, are the CoX unified interface, which are 
//! compatible with a  variety of MCUs.
//! -# APIs without the prefix \b x, are for special MCU features. The library 
//! also implement fully functions of the MCU peripheral.
//! -# Write your applications.
//! .
//!
//! \subsection CoX_Guide_Howto_Shortpin 1.2 How to use GPIO shortpin(PA0) feature? 
//! \subsubsection CoX_Guide_Howto_Shortpin_What 1.2.1 What is a GPIO shortpin?
//! A GPIO pin always contains info of a GPIO port(GPIO_PORTA_BASE), and a 
//! GPIO Pin(GPIO_PIN_0).
//!
//! A GPIO shortpin in cox is \b a macro contained port, pin information in one 
//! body. PA0, A indicates GPIO_PortA_BASE, 0 indicates GPIO_PIN_0.
//!
//! \subsubsection CoX_Guide_Howto_Shortpin_When 1.2.2 When to use the shortpin feature?
//!
//! - When you just operate a pin in the port.
//! - When a driver device uses a GPIO pin.
//! - The more simple AFIO operation, such as xSPinTypeCAN(CAN0RX, PA4);
//! - ...
//! .
//!
//! \subsubsection CoX_Guide_Howto_Shortpin_How 1.2.3 How to use the shortpin feature?
//! Use the shortpin to read/write:
//! - xGPIOSPinWrite(PA3, 0);
//! -  ulPinState = xGPIOSPinRead(PA3);
//! .
//! 
//! Use the shortpin AFIO operation:
//! - xSPinTypeCAN(CAN0RX, PA4);
//! - xSPinTypeADC() ...
//! .
//!
//! Use the shortpin in a device driver:
//! \code
//! #define SPI_FLASH_PIN_CS  PC2
//!
//! xGPIOSPinWrite(SPI_FLASH_PIN_CS, 0);
//! \endcode
//!
//! There is also APIs to get the Port, Pin:
//! - xSPintoPort(PA0); - result is GPIO_PIN_0
//! - xSPintoPin(PA0); - result is GPIO_PORTA_BASE
//! - xSPintoPortPin(PA0), in a struct - result like: GPIO_PORTA_BASE, GPIO_PIN_0,
//! .
//!
//! \subsection CoX_Guide_Howto_Int  1.3 How to use the CoX interrupt feature?
//! CoX unified defines the interruption of peripherals Compatible with a 
//! variety of MCUs using a callback function with an event ID.
//!
//! Users should use the Event ID, not the interrupt flags in the MCU peripherals.
//!
//! Users should also use the callback function instead of the interrupt Handler
//! function defined in the vector table.
//!
//! Step of Using the interrupt feature:
//! -# xSPIIntCallbackInit() Init the callback function.
//! -# xSPIIntEnable() to enable the interrupt.
//! -# xIntEnable() to enable the interrupt in the NVIC level.
//! -# Your code in the callback function will be called when an interrupt event 
//! coming.
//! .
//! \subsection CoX_Guide_Howto_Peripheral 1.4 How to Use the Peripheral?
//! 1. First of all, you should set the system clock using XSysCtlClockSet().
//! 
//! 2. If you use a peripheral such as SPI, you should enable the SPI clock and 
//! some GPIO clock before calling any SPI APIs. 
//! \code
//! xSysCtlPeripheralEnable(xSYSCTL_PERIPH_SPI0);
//! xSysCtlPeripheralEnable(xGPIOSPinToPeripheralId(FLASH_PIN_SPI_CLK));
//! xSysCtlPeripheralEnable(xGPIOSPinToPeripheralId(FLASH_PIN_SPI_CS));
//! xSysCtlPeripheralEnable(xGPIOSPinToPeripheralId(FLASH_PIN_SPI_MISO));
//! xSysCtlPeripheralEnable(xGPIOSPinToPeripheralId(FLASH_PIN_SPI_MOSI));
//! \endcode
//!
//! 3. Then you should config the SPI IO.
//! \code
//! xSPinTypeSPI(SPI2CLK, FLASH_PIN_SPI_CLK);
//! xSPinTypeSPI(SPI2MISO, FLASH_PIN_SPI_MISO);
//! xSPinTypeSPI(SPI2MOSI, FLASH_PIN_SPI_MOSI); 
//! \endcode
//! 
//! 4. You can enable and initialize the SPI.
//! \code
//! xSPIEnable(FLASH_PIN_SPI_PORT);
//! xSPIConfigSet(FLASH_PIN_SPI_PORT, ulSpiClock, xSPI_MOTO_FORMAT_MODE_0 |
//!                                               xSPI_MODE_MASTER | 
//!                                               xSPI_MSB_FIRST |
//!                                               xSPI_DATA_WIDTH8); 
//! \endcode
//!
//! 5. You can use SPI to communicate with a device. 
//!
//!
//! \subsection CoX_Guide_Howto_More_Portable 1.5 Make your code be ported more easily based on CoX
//! Code based on CoX is convenient to port, but you can do more to make the 
//! code  more portable.
//!
//! For example:
//! When using CoX SPI to write a SPI flash driver, we redefine the SPI base  
//! and shortpins. And then when need porting the code to other paltforms, We 
//! only need to change this defines.
//! \code
//! //
//! // Define SPIx as a port connecting W25Xxx which can be configured
//! //
//! #define FLASH_PIN_SPI_CLK       PD1
//! #define FLASH_PIN_SPI_MISO      PD2
//! #define FLASH_PIN_SPI_MOSI      PD3
//! #define FLASH_PIN_SPI_PORT      SPI2_BASE
//! //
//! // Configure GPIOC.0 as chip Select
//! //
//! #define FLASH_PIN_SPI_CS        PD0
//!
//! \endcode
//!
//! \subsection CoX_Guide_Howto_Code_Standard 1.6. Code Standard in CoX
//! \subsubsection CoX_Guide_Howto_Code_Name 1.6.1 Naming
//! - An API function name is always like: Moudle + Nouns + verbs, such as
//! SPIIntEnable(), xGPIOSPinWrite() ....
//! - A variable name is always with a prefix:
//!   - unsigned long with a prefix ul, such as ulConfig;
//!   - unsigned char with a prefix uc, ucTemp;
//!   - A porter-type variables with prefix 'p', such as unsigned long *pulReadBuffer;
//!   - If the variable is global variable should plus an additional prefix "g_". 
//! such as unsigned long g_ulCalendar;
//!   .
//! - source files name:
//!   - CoX source file is always have a prefix 'x', such as xuart.h, xuart.c
//!   - The header file contains peripheral register info, always called 
//! xhw_moudle.h, such as xhw_uart.h.
//!   .
//! . 
//! \subsubsection CoX_Guide_Howto_Code_doxygen 1.6.2 Doxygen
//! The presentment is using the doxygen standard.
//!
//!
//! \n
//! \section CoX_Guide_Port 2. How to Port CoX to other MCU platforms?
//! 
//! -# Download the blank template library.
//! -# Wirte the register info of the peripheral in the xhw_*.h.
//! -# Implement all the functions of the peripheral in the moudle.h/.c.
//! -# Port the APIs with the prefix 'x' based on the periperal functions
//! you have implemented.
//! -# Test and write the doxygen documents.
//! .
//! If you encounter any problems in the porting period, please contact us.
//! 
//! \n
//! \n
//!
//
//*****************************************************************************